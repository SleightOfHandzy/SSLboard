// Code generated by protoc-gen-go. DO NOT EDIT.
// source: SSLboard.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	SSLboard.proto

It has these top-level messages:
	Message
	Credentials
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Token    string   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Username string   `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Group    string   `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
	Msg      string   `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
	Groups   []string `protobuf:"bytes,5,rep,name=groups" json:"groups,omitempty"`
	Messages []string `protobuf:"bytes,6,rep,name=messages" json:"messages,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Message) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Message) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Message) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Message) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Message) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Credentials struct {
	Username string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string   `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Groups   []string `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
}

func (m *Credentials) Reset()                    { *m = Credentials{} }
func (m *Credentials) String() string            { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()               {}
func (*Credentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Credentials) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Credentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Credentials) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "pb.Message")
	proto.RegisterType((*Credentials)(nil), "pb.Credentials")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SSLboard service

type SSLboardClient interface {
	Authenticate(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Credentials, error)
	Get(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	Post(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	End(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type sSLboardClient struct {
	cc *grpc.ClientConn
}

func NewSSLboardClient(cc *grpc.ClientConn) SSLboardClient {
	return &sSLboardClient{cc}
}

func (c *sSLboardClient) Authenticate(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Credentials, error) {
	out := new(Credentials)
	err := grpc.Invoke(ctx, "/pb.SSLboard/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLboardClient) Get(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/pb.SSLboard/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLboardClient) Post(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/pb.SSLboard/Post", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLboardClient) End(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/pb.SSLboard/End", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SSLboard service

type SSLboardServer interface {
	Authenticate(context.Context, *Credentials) (*Credentials, error)
	Get(context.Context, *Message) (*Message, error)
	Post(context.Context, *Message) (*Message, error)
	End(context.Context, *Message) (*Message, error)
}

func RegisterSSLboardServer(s *grpc.Server, srv SSLboardServer) {
	s.RegisterService(&_SSLboard_serviceDesc, srv)
}

func _SSLboard_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLboardServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLboard/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLboardServer).Authenticate(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLboard_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLboardServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLboard/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLboardServer).Get(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLboard_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLboardServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLboard/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLboardServer).Post(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLboard_End_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLboardServer).End(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLboard/End",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLboardServer).End(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _SSLboard_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SSLboard",
	HandlerType: (*SSLboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _SSLboard_Authenticate_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SSLboard_Get_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _SSLboard_Post_Handler,
		},
		{
			MethodName: "End",
			Handler:    _SSLboard_End_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "SSLboard.proto",
}

func init() { proto.RegisterFile("SSLboard.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xeb, 0xba, 0x0d, 0xe9, 0x15, 0x01, 0x3a, 0x21, 0x64, 0x65, 0x6a, 0x3d, 0x75, 0xca,
	0x50, 0x9e, 0x00, 0x21, 0xc4, 0x02, 0x12, 0x6a, 0x67, 0x06, 0x87, 0x58, 0x01, 0x41, 0x62, 0xcb,
	0xe7, 0x88, 0x47, 0xe1, 0x15, 0x78, 0x4c, 0x64, 0xa7, 0xa9, 0x42, 0x87, 0x6c, 0xfe, 0xee, 0xbf,
	0xf3, 0xff, 0xeb, 0x0e, 0x2e, 0xf6, 0xfb, 0xa7, 0xc2, 0x28, 0x57, 0xe6, 0xd6, 0x19, 0x6f, 0x70,
	0x6a, 0x0b, 0xf9, 0xc3, 0xe0, 0xec, 0x59, 0x13, 0xa9, 0x4a, 0xe3, 0x35, 0xcc, 0xbd, 0xf9, 0xd4,
	0x8d, 0x60, 0x2b, 0xb6, 0x59, 0xec, 0x3a, 0xc0, 0x0c, 0xd2, 0x96, 0xb4, 0x6b, 0x54, 0xad, 0xc5,
	0x34, 0x0a, 0x47, 0x0e, 0x13, 0x95, 0x33, 0xad, 0x15, 0xbc, 0x9b, 0x88, 0x80, 0x57, 0xc0, 0x6b,
	0xaa, 0xc4, 0x2c, 0xd6, 0xc2, 0x13, 0x6f, 0x20, 0x89, 0x12, 0x89, 0xf9, 0x8a, 0x6f, 0x16, 0xbb,
	0x03, 0x85, 0xbf, 0xeb, 0xce, 0x9c, 0x44, 0x12, 0x95, 0x23, 0xcb, 0x57, 0x58, 0xde, 0x3b, 0x5d,
	0xea, 0xc6, 0x7f, 0xa8, 0x2f, 0xfa, 0x17, 0x83, 0x9d, 0xc4, 0xc8, 0x20, 0xb5, 0x8a, 0xe8, 0xdb,
	0xb8, 0xb2, 0x8f, 0xd8, 0xf3, 0xc0, 0x9a, 0x0f, 0xad, 0xb7, 0xbf, 0x0c, 0xd2, 0x7e, 0x1f, 0xb8,
	0x85, 0xf3, 0xbb, 0xd6, 0xbf, 0x07, 0xaf, 0x37, 0xe5, 0x35, 0x5e, 0xe6, 0xb6, 0xc8, 0x07, 0xee,
	0xd9, 0x69, 0x41, 0x4e, 0x70, 0x0d, 0xfc, 0x51, 0x7b, 0x5c, 0x06, 0xe5, 0xb0, 0xc1, 0x6c, 0x08,
	0x72, 0x82, 0x12, 0x66, 0x2f, 0x86, 0xc6, 0x7b, 0xd6, 0xc0, 0x1f, 0x9a, 0x72, 0xac, 0xa5, 0x48,
	0xe2, 0xb9, 0x6e, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x84, 0x74, 0xf1, 0x61, 0xc0, 0x01, 0x00,
	0x00,
}
